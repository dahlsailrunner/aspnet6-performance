// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace CarvedRock.Data.CompiledModels
{
    public partial class LocalContextModel
    {
        partial void Initialize()
        {
            var product = ProductEntityType.Create(this);
            var productRating = ProductRatingEntityType.Create(this);

            ProductEntityType.CreateForeignKey1(product, productRating);

            ProductEntityType.CreateAnnotations(product);
            ProductRatingEntityType.CreateAnnotations(productRating);

            AddAnnotation("ProductVersion", "8.0.0");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var product = FindEntityType("CarvedRock.Data.Entities.Product")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            product.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var carvedRockDataEntitiesProductTableBase = new TableBase("CarvedRock.Data.Entities.Product", null, relationalModel);
            var categoryColumnBase = new ColumnBase<ColumnMappingBase>("Category", "TEXT", carvedRockDataEntitiesProductTableBase);
            carvedRockDataEntitiesProductTableBase.Columns.Add("Category", categoryColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "TEXT", carvedRockDataEntitiesProductTableBase);
            carvedRockDataEntitiesProductTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", carvedRockDataEntitiesProductTableBase);
            carvedRockDataEntitiesProductTableBase.Columns.Add("Id", idColumnBase);
            var imgUrlColumnBase = new ColumnBase<ColumnMappingBase>("ImgUrl", "TEXT", carvedRockDataEntitiesProductTableBase);
            carvedRockDataEntitiesProductTableBase.Columns.Add("ImgUrl", imgUrlColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", carvedRockDataEntitiesProductTableBase);
            carvedRockDataEntitiesProductTableBase.Columns.Add("Name", nameColumnBase);
            var priceColumnBase = new ColumnBase<ColumnMappingBase>("Price", "REAL", carvedRockDataEntitiesProductTableBase);
            carvedRockDataEntitiesProductTableBase.Columns.Add("Price", priceColumnBase);
            var ratingIdColumnBase = new ColumnBase<ColumnMappingBase>("RatingId", "INTEGER", carvedRockDataEntitiesProductTableBase)
            {
                IsNullable = true
            };
            carvedRockDataEntitiesProductTableBase.Columns.Add("RatingId", ratingIdColumnBase);
            relationalModel.DefaultTables.Add("CarvedRock.Data.Entities.Product", carvedRockDataEntitiesProductTableBase);
            var carvedRockDataEntitiesProductMappingBase = new TableMappingBase<ColumnMappingBase>(product, carvedRockDataEntitiesProductTableBase, true);
            carvedRockDataEntitiesProductTableBase.AddTypeMapping(carvedRockDataEntitiesProductMappingBase, false);
            defaultTableMappings.Add(carvedRockDataEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, product.FindProperty("Id")!, carvedRockDataEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryColumnBase, product.FindProperty("Category")!, carvedRockDataEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, product.FindProperty("Description")!, carvedRockDataEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imgUrlColumnBase, product.FindProperty("ImgUrl")!, carvedRockDataEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, product.FindProperty("Name")!, carvedRockDataEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)priceColumnBase, product.FindProperty("Price")!, carvedRockDataEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ratingIdColumnBase, product.FindProperty("RatingId")!, carvedRockDataEntitiesProductMappingBase);

            var tableMappings = new List<TableMapping>();
            product.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var productsTable = new Table("Products", null, relationalModel);
            var idColumn = new Column("Id", "INTEGER", productsTable);
            productsTable.Columns.Add("Id", idColumn);
            var categoryColumn = new Column("Category", "TEXT", productsTable);
            productsTable.Columns.Add("Category", categoryColumn);
            var descriptionColumn = new Column("Description", "TEXT", productsTable);
            productsTable.Columns.Add("Description", descriptionColumn);
            var imgUrlColumn = new Column("ImgUrl", "TEXT", productsTable);
            productsTable.Columns.Add("ImgUrl", imgUrlColumn);
            var nameColumn = new Column("Name", "TEXT", productsTable);
            productsTable.Columns.Add("Name", nameColumn);
            var priceColumn = new Column("Price", "REAL", productsTable);
            productsTable.Columns.Add("Price", priceColumn);
            var ratingIdColumn = new Column("RatingId", "INTEGER", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("RatingId", ratingIdColumn);
            var pK_Products = new UniqueConstraint("PK_Products", productsTable, new[] { idColumn });
            productsTable.PrimaryKey = pK_Products;
            var pK_ProductsUc = RelationalModel.GetKey(this,
                "CarvedRock.Data.Entities.Product",
                new[] { "Id" });
            pK_Products.MappedKeys.Add(pK_ProductsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProductsUc).Add(pK_Products);
            productsTable.UniqueConstraints.Add("PK_Products", pK_Products);
            var iX_Products_RatingId = new TableIndex(
            "IX_Products_RatingId", productsTable, new[] { ratingIdColumn }, false);
            var iX_Products_RatingIdIx = RelationalModel.GetIndex(this,
                "CarvedRock.Data.Entities.Product",
                new[] { "RatingId" });
            iX_Products_RatingId.MappedIndexes.Add(iX_Products_RatingIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Products_RatingIdIx).Add(iX_Products_RatingId);
            productsTable.Indexes.Add("IX_Products_RatingId", iX_Products_RatingId);
            relationalModel.Tables.Add(("Products", null), productsTable);
            var productsTableMapping = new TableMapping(product, productsTable, true);
            productsTable.AddTypeMapping(productsTableMapping, false);
            tableMappings.Add(productsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, product.FindProperty("Id")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(categoryColumn, product.FindProperty("Category")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, product.FindProperty("Description")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(imgUrlColumn, product.FindProperty("ImgUrl")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, product.FindProperty("Name")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(priceColumn, product.FindProperty("Price")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(ratingIdColumn, product.FindProperty("RatingId")!, productsTableMapping);

            var productRating = FindEntityType("CarvedRock.Data.Entities.ProductRating")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            productRating.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var carvedRockDataEntitiesProductRatingTableBase = new TableBase("CarvedRock.Data.Entities.ProductRating", null, relationalModel);
            var aggregateRatingColumnBase = new ColumnBase<ColumnMappingBase>("AggregateRating", "TEXT", carvedRockDataEntitiesProductRatingTableBase);
            carvedRockDataEntitiesProductRatingTableBase.Columns.Add("AggregateRating", aggregateRatingColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", carvedRockDataEntitiesProductRatingTableBase);
            carvedRockDataEntitiesProductRatingTableBase.Columns.Add("Id", idColumnBase0);
            var numberOfRatingsColumnBase = new ColumnBase<ColumnMappingBase>("NumberOfRatings", "INTEGER", carvedRockDataEntitiesProductRatingTableBase);
            carvedRockDataEntitiesProductRatingTableBase.Columns.Add("NumberOfRatings", numberOfRatingsColumnBase);
            relationalModel.DefaultTables.Add("CarvedRock.Data.Entities.ProductRating", carvedRockDataEntitiesProductRatingTableBase);
            var carvedRockDataEntitiesProductRatingMappingBase = new TableMappingBase<ColumnMappingBase>(productRating, carvedRockDataEntitiesProductRatingTableBase, true);
            carvedRockDataEntitiesProductRatingTableBase.AddTypeMapping(carvedRockDataEntitiesProductRatingMappingBase, false);
            defaultTableMappings0.Add(carvedRockDataEntitiesProductRatingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, productRating.FindProperty("Id")!, carvedRockDataEntitiesProductRatingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aggregateRatingColumnBase, productRating.FindProperty("AggregateRating")!, carvedRockDataEntitiesProductRatingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)numberOfRatingsColumnBase, productRating.FindProperty("NumberOfRatings")!, carvedRockDataEntitiesProductRatingMappingBase);

            var tableMappings0 = new List<TableMapping>();
            productRating.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var productRatingsTable = new Table("ProductRatings", null, relationalModel);
            var idColumn0 = new Column("Id", "INTEGER", productRatingsTable);
            productRatingsTable.Columns.Add("Id", idColumn0);
            var aggregateRatingColumn = new Column("AggregateRating", "TEXT", productRatingsTable);
            productRatingsTable.Columns.Add("AggregateRating", aggregateRatingColumn);
            var numberOfRatingsColumn = new Column("NumberOfRatings", "INTEGER", productRatingsTable);
            productRatingsTable.Columns.Add("NumberOfRatings", numberOfRatingsColumn);
            var pK_ProductRatings = new UniqueConstraint("PK_ProductRatings", productRatingsTable, new[] { idColumn0 });
            productRatingsTable.PrimaryKey = pK_ProductRatings;
            var pK_ProductRatingsUc = RelationalModel.GetKey(this,
                "CarvedRock.Data.Entities.ProductRating",
                new[] { "Id" });
            pK_ProductRatings.MappedKeys.Add(pK_ProductRatingsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProductRatingsUc).Add(pK_ProductRatings);
            productRatingsTable.UniqueConstraints.Add("PK_ProductRatings", pK_ProductRatings);
            relationalModel.Tables.Add(("ProductRatings", null), productRatingsTable);
            var productRatingsTableMapping = new TableMapping(productRating, productRatingsTable, true);
            productRatingsTable.AddTypeMapping(productRatingsTableMapping, false);
            tableMappings0.Add(productRatingsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, productRating.FindProperty("Id")!, productRatingsTableMapping);
            RelationalModel.CreateColumnMapping(aggregateRatingColumn, productRating.FindProperty("AggregateRating")!, productRatingsTableMapping);
            RelationalModel.CreateColumnMapping(numberOfRatingsColumn, productRating.FindProperty("NumberOfRatings")!, productRatingsTableMapping);
            var fK_Products_ProductRatings_RatingId = new ForeignKeyConstraint(
                "FK_Products_ProductRatings_RatingId", productsTable, productRatingsTable,
                new[] { ratingIdColumn },
                productRatingsTable.FindUniqueConstraint("PK_ProductRatings")!, ReferentialAction.NoAction);
            var fK_Products_ProductRatings_RatingIdFk = RelationalModel.GetForeignKey(this,
                "CarvedRock.Data.Entities.Product",
                new[] { "RatingId" },
                "CarvedRock.Data.Entities.ProductRating",
                new[] { "Id" });
            fK_Products_ProductRatings_RatingId.MappedForeignKeys.Add(fK_Products_ProductRatings_RatingIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Products_ProductRatings_RatingIdFk).Add(fK_Products_ProductRatings_RatingId);
            productsTable.ForeignKeyConstraints.Add(fK_Products_ProductRatings_RatingId);
            productRatingsTable.ReferencingForeignKeyConstraints.Add(fK_Products_ProductRatings_RatingId);
            return relationalModel.MakeReadOnly();
        }
    }
}
